import tkinter as tk
from tkinter import ttk, messagebox
import os
import json
import threading
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import requests
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import pyperclip
from process_tts import ProcessTTS


class ChromeProfileManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Chrome Profile Manager - Selenium")
        self.root.geometry("600x500")
        self.driver = None
        # ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a profiles
        self.chrome_data_path = "chrome_data"

        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(self.chrome_data_path):
            os.makedirs(self.chrome_data_path)

        # File l∆∞u c·∫•u h√¨nh
        self.config_file = "profile_config.json"

        # Load c·∫•u h√¨nh
        self.config = self.load_config()

        # T·∫°o giao di·ªán
        self.setup_ui()

        # Load danh s√°ch profile
        self.load_profiles()

    def setup_ui(self):
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # C·∫•u h√¨nh grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)

        # Label ti√™u ƒë·ªÅ
        title_label = ttk.Label(main_frame, text="Chrome Profile Manager - Selenium",
                                font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, pady=10)

        # Frame ch·ª©a button refresh
        refresh_frame = ttk.Frame(main_frame)
        refresh_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=5)

        # Button refresh
        refresh_btn = ttk.Button(
            refresh_frame, text="üîÑ Refresh Profiles", command=self.load_profiles)
        refresh_btn.pack(side=tk.LEFT, padx=(0, 10))

        # Button ch·∫°y automation
        self.run_automation_btn = ttk.Button(refresh_frame, text="üöÄ Ch·∫°y Automation",
                                             command=self.run_automation, state='disabled')
        self.run_automation_btn.pack(side=tk.LEFT)

        # Frame danh s√°ch profile
        profile_list_frame = ttk.LabelFrame(
            main_frame, text="Danh s√°ch Profile", padding="10")
        profile_list_frame.grid(row=2, column=0, sticky=(
            tk.W, tk.E, tk.N, tk.S), pady=10)
        profile_list_frame.columnconfigure(0, weight=1)
        profile_list_frame.rowconfigure(0, weight=1)

        # T·∫°o Treeview ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch profile
        columns = ('Profile', 'Status', 'Action')
        self.profile_tree = ttk.Treeview(
            profile_list_frame, columns=columns, show='headings', height=15)

        # ƒê·ªãnh nghƒ©a c√°c c·ªôt
        self.profile_tree.heading('Profile', text='T√™n Profile')
        self.profile_tree.heading('Status', text='Tr·∫°ng th√°i')
        self.profile_tree.heading('Action', text='H√†nh ƒë·ªông')

        # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt
        self.profile_tree.column('Profile', width=200, minwidth=150)
        self.profile_tree.column('Status', width=100, minwidth=80)
        self.profile_tree.column('Action', width=150, minwidth=120)

        # Scrollbar cho Treeview
        scrollbar = ttk.Scrollbar(
            profile_list_frame, orient=tk.VERTICAL, command=self.profile_tree.yview)
        self.profile_tree.configure(yscrollcommand=scrollbar.set)

        # Grid Treeview v√† scrollbar
        self.profile_tree.grid(
            row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))

        # Bind double-click event
        self.profile_tree.bind('<Double-1>', self.on_profile_double_click)

        # Bind selection change event ƒë·ªÉ enable/disable button automation
        self.profile_tree.bind('<<TreeviewSelect>>',
                               self.on_profile_selection_change)

        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("S·∫µn s√†ng - S·ª≠ d·ª•ng Selenium ƒë·ªÉ m·ªü Chrome")
        status_bar = ttk.Label(
            main_frame, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=10)

    def load_profiles(self):
        """Load danh s√°ch folder trong chrome_data/"""
        try:
            # X√≥a t·∫•t c·∫£ items c≈©
            for item in self.profile_tree.get_children():
                self.profile_tree.delete(item)

            profiles = [d for d in os.listdir(self.chrome_data_path)
                        if os.path.isdir(os.path.join(self.chrome_data_path, d))]

            if profiles:
                for profile in sorted(profiles):
                    # Ki·ªÉm tra tr·∫°ng th√°i profile
                    status = "S·∫µn s√†ng"
                    if profile in self.config:
                        status = "ƒê√£ c·∫•u h√¨nh"

                    # Th√™m v√†o Treeview
                    self.profile_tree.insert('', 'end', values=(
                        profile, status, "Double-click ƒë·ªÉ m·ªü"))

                self.status_var.set(f"ƒê√£ t·∫£i {len(profiles)} profile(s)")
            else:
                self.status_var.set("Kh√¥ng t√¨m th·∫•y profile n√†o")

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ load profiles: {str(e)}")
            self.status_var.set("L·ªói khi load profiles")

    def on_profile_double_click(self, event):
        """Khi double-click v√†o profile"""
        selection = self.profile_tree.selection()
        if selection:
            item = self.profile_tree.item(selection[0])
            profile_name = item['values'][0]
            self.open_profile_with_selenium(profile_name)

    def open_profile_with_selenium(self, profile_name):
        """M·ªü Chrome profile b·∫±ng Selenium"""
        try:
            self.status_var.set(
                f"ƒêang m·ªü profile {profile_name} v·ªõi Selenium...")

            # Ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng block UI
            thread = threading.Thread(
                target=self._open_selenium_thread, args=(profile_name,))
            thread.daemon = True
            thread.start()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü profile: {str(e)}")
            self.status_var.set("L·ªói khi m·ªü profile")

    def _open_selenium_thread(self, profile_name):
        """Thread ƒë·ªÉ m·ªü Chrome v·ªõi Selenium"""
        try:
            # ƒê∆∞·ªùng d·∫´n profile
            profile_path = os.path.abspath(
                os.path.join(self.chrome_data_path, profile_name))

            # C·∫•u h√¨nh Chrome options
            chrome_options = Options()
            chrome_options.add_argument(f"--user-data-dir={profile_path}")
            chrome_options.add_argument("--no-first-run")
            chrome_options.add_argument("--no-default-browser-check")
            chrome_options.add_argument(
                "--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option(
                "excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option(
                'useAutomationExtension', False)

            # B·∫≠t performance logging
            chrome_options.set_capability(
                'goog:loggingPrefs', {'performance': 'ALL'})

            # Kh·ªüi t·∫°o WebDriver
            driver = webdriver.Chrome(options=chrome_options)

            # ·∫®n th√¥ng b√°o automation
            driver.execute_script(
                "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            # M·ªü trang m·∫∑c ƒë·ªãnh
            driver.get("https://www.google.com")

            self.status_var.set(f"ƒê√£ m·ªü profile {profile_name} th√†nh c√¥ng")

        except Exception as e:
            error_msg = f"L·ªói khi m·ªü profile {profile_name}: {str(e)}"
            messagebox.showerror("L·ªói", error_msg)
            self.status_var.set(f"L·ªói: {str(e)}")

    def load_config(self):
        """Load c·∫•u h√¨nh t·ª´ file JSON"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            # Kh√¥ng hi·ªÉn th·ªã l·ªói n·∫øu file config ch∆∞a t·ªìn t·∫°i
            pass
        return {}

    def on_profile_selection_change(self, event):
        """Khi thay ƒë·ªïi selection c·ªßa profile, enable/disable button automation"""
        selection = self.profile_tree.selection()
        if selection:
            self.run_automation_btn.config(state='normal')
        else:
            self.run_automation_btn.config(state='disabled')

    def run_automation(self):
        """Ch·∫°y automation cho profile ƒëang ƒë∆∞·ª£c ch·ªçn"""
        selection = self.profile_tree.selection()
        if not selection:
            messagebox.showwarning(
                "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt profile ƒë·ªÉ ch·∫°y automation")
            return

        item = self.profile_tree.item(selection[0])
        profile_name = item['values'][0]

        try:
            self.status_var.set(
                f"ƒêang ch·∫°y automation cho profile {profile_name}...")
            self.run_automation_btn.config(state='disabled')

            # Ch·∫°y automation trong thread ri√™ng
            thread = threading.Thread(
                target=self._run_automation_thread, args=(profile_name,))
            thread.daemon = True
            thread.start()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·∫°y automation: {str(e)}")
            self.status_var.set("L·ªói khi ch·∫°y automation")
            self.run_automation_btn.config(state='normal')

    def _run_automation_thread(self, profile_name):
        """Thread ƒë·ªÉ ch·∫°y automation"""
        try:
            # ƒê∆∞·ªùng d·∫´n profile
            profile_path = os.path.abspath(
                os.path.join(self.chrome_data_path, profile_name))

            # C·∫•u h√¨nh Chrome options
            chrome_options = Options()
            chrome_options.add_argument(f"--user-data-dir={profile_path}")
            chrome_options.add_argument("--no-first-run")
            chrome_options.add_argument("--no-default-browser-check")
            chrome_options.add_argument(
                "--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option(
                "excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option(
                'useAutomationExtension', False)

            # B·∫≠t performance logging
            chrome_options.set_capability(
                'goog:loggingPrefs', {'performance': 'ALL'})

            # Kh·ªüi t·∫°o WebDriver
            self.driver = webdriver.Chrome(options=chrome_options)

            # ·∫®n th√¥ng b√°o automation
            self.driver.execute_script(
                "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            # M·ªü trang m·∫∑c ƒë·ªãnh
            self.driver.get("https://studio.vbee.vn/studio/text-to-speech")
            time.sleep(10)

            process_tts = ProcessTTS()
            process_tts.start_tts(callback_tts=self.cb_start)
        except Exception as e:
            print("CONFIG ERROR", e)

    def cb_start(self, content):
        try:
            editable_div = self.driver.find_element(
                By.XPATH,
                "//div[@contenteditable='true']"
            )

            # Click v√†o ƒë·ªÉ focus
            editable_div.click()
            time.sleep(2)
            
            pyperclip.copy(content)
            # Select all text tr∆∞·ªõc, sau ƒë√≥ d√°n
            editable_div.send_keys(Keys.CONTROL + 'a')
            editable_div.send_keys(Keys.CONTROL + 'v')

            # B·∫≠t Performance Logging ƒë·ªÉ b·∫Øt network requests
            self.driver.execute_cdp_cmd('Performance.enable', {})

            # B·∫≠t Network Logging
            self.driver.execute_cdp_cmd('Network.enable', {})

            # L∆∞u tr·ªØ requests ƒë·ªÉ ph√¢n t√≠ch
            requests_data = []

            # Click button TTS
            button_tts = self.driver.find_element(
                By.XPATH, "//button[@id='convert-tts']")
            button_tts.click()

            # Ch·ªù v√† thu th·∫≠p requests
            time.sleep(5)
            auth_value = None
            # L·∫•y performance logs
            try:
                logs = self.driver.get_log('performance')
                for entry in logs:
                    try:
                        message = json.loads(entry['message'])
                        if 'message' in message and message['message']['method'] == 'Network.requestWillBeSent':
                            request = message['message']['params']['request']
                            if '/api/v1/synthesis' in request['url']:
                                request_info = {
                                    'url': request['url'],
                                    'method': request['method'],
                                    'headers': request['headers'],
                                    'postData': request.get('postData', '')
                                }
                                requests_data.append(request_info)
                                print(f"üîç B·∫Øt ƒë∆∞·ª£c API /api/v1/synthesis:")
                                if 'Authorization' in request_info['headers']:
                                    auth_value = request_info['headers']['Authorization']
                    except Exception as e:
                        continue
            except Exception as e:
                print(f"L·ªói khi l·∫•y performance logs: {e}")
                # T·∫Øt logging
            self.driver.execute_cdp_cmd('Performance.disable', {})
            self.driver.execute_cdp_cmd('Network.disable', {})

            print("TOKEN", auth_value[:20])
            request_id = None
            retry_count = 0
            max_retries = 15
            
            while retry_count < max_retries:
                try:
                    print(f"ƒêANG CH·ªú TTS.. (l·∫ßn th·ª≠ {retry_count + 1}/{max_retries})")
                    time.sleep(5)

                    # T√¨m element d·ª±a tr√™n text content v√† class cha, sau ƒë√≥ select v√†o span c√≥ data-id
                    element = self.driver.find_element(
                        By.XPATH,
                        f"//tr[contains(@class, 'MuiTableRow-root')]//p[contains(text(), '{content.strip()[:20]}')]/ancestor::tr//span[@data-id='play-req-audio']"
                    )

                    request_id = element.get_attribute("data-request-id")
                    print(f"‚úÖ T√¨m th·∫•y element, request_id: {request_id}")
                    break
                except Exception as e:
                    retry_count += 1
                    print(f"‚ùå L·∫ßn th·ª≠ {retry_count}/{max_retries} th·∫•t b·∫°i: {e}")
                    
                    if retry_count >= max_retries:
                        print("‚ö†Ô∏è ƒê√£ th·ª≠ qu√° 15 l·∫ßn, b·ªè qua v√† ti·∫øp t·ª•c...")
                        break
                    
                    time.sleep(5)
            # G·ª≠i n·ªôi dung
            print("data-request-id:", request_id)

            # check success
            print("üîç ƒêang ki·ªÉm tra tr·∫°ng th√°i TTS...")
            audio_url = None
            while True:
                try:
                    res = requests.get(f"https://vbee.vn/api/v1/requests/{request_id}/audio", headers={
                        "authorization": auth_value
                    })

                    # Ki·ªÉm tra response
                    if res.status_code == 200:
                        try:
                            response_data = res.json()

                            # Ki·ªÉm tra n·∫øu c√≥ audio URL
                            if (response_data.get('status') == 1 and
                                'result' in response_data and
                                    'audio' in response_data['result']):

                                audio_url = response_data['result']['audio']
                                print(f"üéµ TTS HO√ÄN TH√ÄNH!")
                                print(f"   Audio URL: {audio_url}")
                                break
                            else:
                                print("‚è≥ TTS ƒëang x·ª≠ l√Ω... status:",
                                        response_data.get('status'))

                        except json.JSONDecodeError:
                            print("‚ö†Ô∏è Response kh√¥ng ph·∫£i JSON h·ª£p l·ªá")

                    # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
                    time.sleep(5)

                except Exception as e:
                    print("‚ùå L·ªói khi ki·ªÉm tra TTS:", e)
                    time.sleep(5)

            # tr·∫£ audio v·ªÅ cho user
            print("audio_url", audio_url)
            return audio_url
            # self.status_var.set(
            #     f"ƒê√£ ch·∫°y automation cho profile {profile_name} th√†nh c√¥ng")

        except Exception as e:
            self.status_var.set(f"L·ªói: {str(e)}")

        finally:
            # Re-enable button automation
            self.run_automation_btn.config(state='normal')


if __name__ == "__main__":
    root = tk.Tk()
    app = ChromeProfileManager(root)
    root.mainloop()
